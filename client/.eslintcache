[{"C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\index.js":"1","C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\App.js":"3","C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\components\\GetUserDetails.jsx":"4","C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\components\\Board.jsx":"5","C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\components\\CreateGame.jsx":"6","C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\cardsService.js":"7","C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\components\\Card.jsx":"8"},{"size":158,"mtime":1610353497440,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":2205,"mtime":1610997371179,"results":"12","hashOfConfig":"10"},{"size":1313,"mtime":1610997371176,"results":"13","hashOfConfig":"10"},{"size":3101,"mtime":1610997371179,"results":"14","hashOfConfig":"10"},{"size":3559,"mtime":1610997371178,"results":"15","hashOfConfig":"10"},{"size":459,"mtime":1609348606441,"results":"16","hashOfConfig":"10"},{"size":322,"mtime":1609343222037,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"3r4vhq",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\index.js",[],["38","39"],"C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\reportWebVitals.js",[],["40","41"],"C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\App.js",[],"C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\components\\GetUserDetails.jsx",[],"C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\components\\Board.jsx",["42","43","44"],"import React from 'react';\r\nimport Card from './Card';\r\nimport { gCards } from '../cardsService';\r\n\r\nclass Board extends React.Component {\r\n    render() {\r\n        var { socket, gameData } = this.props\r\n        var cards = gCards\r\n        console.log(gameData);\r\n        // game_status: \"ongoing\"\r\n        // game_winner: null\r\n        // playboard: []\r\n        // players: {_Ft02HHlvso5OhYcAAAE: {â€¦}, f7cKboKqgogdJbz8AAAF: {â€¦}}\r\n        // whose_turn: \"_Ft02HHlvso5OhYcAAAE\"\r\n        return 'board'\r\n        // return !cards ? 'loading' : (\r\n        //     <section className=\"board\">\r\n        //         <section className=\"opponents\">\r\n        //             {\r\n        //                  Object.keys(gameData.players).map((player, idx) => {\r\n        //                     return (\r\n        //                         <div key={idx} className=\"user\">\r\n        //                             ðŸ˜„\r\n        //                             <p className=\"name\">{player}</p>\r\n        //                             <p>score: {idx}</p>\r\n        //                         </div>\r\n        //                     )\r\n        //                 })\r\n        //             }\r\n\r\n        //         </section>\r\n        //         {\r\n        //             gameData.isUserTurn ? <h3 className=\"description\">{gameData.description} </h3>\r\n        //                 : <label>\r\n        //                     Enter your card description:\r\n        //                 <input\r\n        //                         type=\"text\"\r\n        //                         value={description}\r\n        //                         onChange={event => setDescription(event.target.value)}\r\n        //                     />\r\n        //                 </label>\r\n        //         }\r\n        //         {!isChoosingMyCard &&\r\n        //             <section>\r\n        //                 <p>which card matches best to this description?</p>\r\n        //                 <section className=\"cards\">\r\n        //                     {\r\n        //                         cards.map((card) => {\r\n        //                             return (<Card card={card} />)\r\n        //                         })\r\n        //                     }\r\n        //                 </section>\r\n        //             </section>\r\n        //         }\r\n        //         {isChoosingMyCard &&\r\n        //             <section>\r\n        //                 <div className=\"hidden-cards\">\r\n        //                     <span>choose your card</span>\r\n        //                 </div>\r\n        //                 <section className=\"current-user\">\r\n        //                     {\r\n        //                         cards.map((card) => {\r\n        //                             return (<Card card={card} />)\r\n        //                         })\r\n        //                     }\r\n        //                 </section>\r\n        //                 <button onClick={() => setIsChoosingMyCard(!isChoosingMyCard)}>OK</button>\r\n        //             </section>\r\n        //         }\r\n        //     </section>\r\n        // )\r\n    }\r\n}\r\n\r\n\r\nexport default Board;","C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\components\\CreateGame.jsx",["45"],"import React from 'react';\r\n\r\nclass CreateGame extends React.Component {\r\n    state = {\r\n        opponents: [],\r\n        invitationReceived: {},\r\n        invitationSent: {},\r\n        opponentResponse: {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { socket } = this.props\r\n\r\n        socket.on('getOpponentsResponse', data => {\r\n            this.updateOpponents(data);\r\n        });\r\n\r\n        socket.on('newOpponentAdded', data => {\r\n            this.updateOpponents([...this.state.opponents, data]);\r\n        });\r\n\r\n        socket.on('receivedInvitation', data => {\r\n            this.receivedInvitation(data)\r\n        });\r\n\r\n        socket.on('invitationResponse', data => {\r\n            this.gotInvitationResponse(data)\r\n        });\r\n\r\n        socket.on('gameStarted', data => {\r\n            console.log(data);\r\n            this.props.gameStartConfirmation(data);\r\n        });\r\n\r\n        socket.emit('getOpponents', {});\r\n    }\r\n\r\n    updateOpponents = (opponents) => {\r\n        this.setState({ opponents });\r\n    }\r\n\r\n    onInvite = (id) => {\r\n        this.props.socket.emit('inviteOpponents', { id });\r\n        this.setState({ opponentResponse: 'pending' });\r\n    }\r\n\r\n    receivedInvitation = (details) => {\r\n        console.log('client received invite', details);\r\n        this.setState({ invitationReceived: details });\r\n    }\r\n\r\n    acceptInvitation = () => {\r\n        this.props.socket.emit('acceptInvitation', this.state.invitationReceived.inviter.id);\r\n    }\r\n\r\n    gotInvitationResponse = (data) => {\r\n        console.log(data.opponent.name, data.answer, ' your request');\r\n        this.setState({ opponentResponse: { status: data.answer, opponent: data.opponent } })\r\n    }\r\n\r\n    onStartGame=()=>{\r\n        this.props.socket.emit('startGame', 'ids');\r\n    }\r\n\r\n    render() {\r\n        const { user, gameStartConfirmation } = this.props\r\n        const { opponents, invitationReceived, opponentResponse } = this.state\r\n\r\n        return !opponents ? <p>wait for friends to connect</p> : (\r\n            <section className=\"create-game\">\r\n                {user}\r\n                <ul className=\"connected\">\r\n                    {\r\n                        opponents.map((opponent, idx) => {\r\n                            return (\r\n                                <li key={idx}>\r\n                                    <span>{opponent.name}</span>\r\n                                    <button onClick={() => this.onInvite(opponent.id)}>Invite</button>\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n                <button onClick={() => this.onStartGame()}>start now</button>\r\n                {\r\n                    invitationReceived.inviter &&\r\n                    <section className=\"message\">\r\n                        <p>{invitationReceived.inviter.name} invited you to play</p>\r\n                        <button onClick={this.acceptInvitation}>accept</button>\r\n                        <button >decline</button>\r\n                    </section>\r\n                }\r\n                {\r\n                    opponentResponse.opponent ?\r\n                        <section className=\"accept\">\r\n                            {opponentResponse.opponent.name} has accepted your invite!\r\n                        </section>\r\n                        : ''\r\n                }\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CreateGame;","C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\cardsService.js",[],"C:\\Users\\Ron\\Desktop\\dev\\she-codes\\pocket-art\\client\\src\\components\\Card.jsx",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"46","replacedBy":"50"},{"ruleId":"48","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":12},{"ruleId":"52","severity":1,"message":"56","line":7,"column":15,"nodeType":"54","messageId":"55","endLine":7,"endColumn":21},{"ruleId":"52","severity":1,"message":"57","line":8,"column":13,"nodeType":"54","messageId":"55","endLine":8,"endColumn":18},{"ruleId":"52","severity":1,"message":"58","line":62,"column":23,"nodeType":"54","messageId":"55","endLine":62,"endColumn":44},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],["59"],["60"],"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'socket' is assigned a value but never used.","'cards' is assigned a value but never used.","'gameStartConfirmation' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]